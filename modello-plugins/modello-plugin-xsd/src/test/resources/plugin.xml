<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin xmlns="http://maven.apache.org/PLUGIN/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/PLUGIN/1.0.0 https://maven.apache.org/xsd/plugin-1.0.0.xsd">
  <name>Apache Maven Javadoc Plugin</name>
  <description>The Apache Maven Javadoc Plugin is a plugin that uses the javadoc tool for
    generating javadocs for the specified project.</description>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-javadoc-plugin</artifactId>
  <version>3.4.2-SNAPSHOT</version>
  <goalPrefix>javadoc</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>aggregate</goal>
      <description>&lt;p&gt;Generates documentation for the &lt;code&gt;Java code&lt;/code&gt; in an &lt;b&gt;aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since version 3.1.0 an aggregated report is created for every module of a Maven multimodule project.&lt;/p&gt;</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>compile</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.AggregatorJavadocReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.5</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="apidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/apidocs">${reportOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>aggregate-jar</goal>
      <description>&lt;p&gt;Bundles the Javadoc documentation for main &lt;code&gt;Java code&lt;/code&gt; in an &lt;b&gt;aggregator&lt;/b&gt; project into a jar
using the standard &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Since version 3.1.0 an aggregated jar is created for every module of a Maven multimodule project.&lt;/p&gt;</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <executePhase>compile</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.AggregatorJavadocJar</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.6</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The archive configuration to use.
See &lt;a href=&quot;http://maven.apache.org/shared/maven-archiver/index.html&quot;&gt;Maven Archiver Reference&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether to attach the generated artifact to the project helper.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.10</since>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>defaultManifestFile</name>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>true</required>
          <editable>false</editable>
          <description>Path to the default MANIFEST file to use. It will be used if
&lt;code&gt;useDefaultManifestFile&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.io.File</type>
          <deprecated>No reason given</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the filename that will be used for the generated jar file. Please note that &lt;code&gt;-javadoc&lt;/code&gt;
or &lt;code&gt;-test-javadoc&lt;/code&gt; will be appended to the file name.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>jarOutputDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directory where the generated jar file will be put.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useDefaultManifestFile</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to enable the use of the &lt;code&gt;defaultManifestFile&lt;/code&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <attach implementation="boolean" default-value="true">${attach}</attach>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <classifier implementation="java.lang.String" default-value="javadoc">${maven.javadoc.classifier}</classifier>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <defaultManifestFile implementation="java.io.File" default-value="${project.build.outputDirectory}/META-INF/MANIFEST.MF"/>
        <destDir implementation="java.io.File">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <finalName implementation="java.lang.String">${project.build.finalName}</finalName>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <jarOutputDirectory implementation="java.lang.String">${project.build.directory}</jarOutputDirectory>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useDefaultManifestFile implementation="boolean" default-value="false"/>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.archiver.Archiver</role>
          <role-hint>jar</role-hint>
          <field-name>jarArchiver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>aggregate-no-fork</goal>
      <description>Generates documentation for the &lt;code&gt;Java code&lt;/code&gt; in an &lt;b&gt;aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.javadoc.AggregatorJavadocNoForkReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>3.1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="apidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/apidocs">${reportOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>fix</goal>
      <description>Fix Javadoc documentation and tags for the &lt;code&gt;Java code&lt;/code&gt; for the project.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>compile</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.FixJavadocMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.6</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>comparisonVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Version to compare the current code against using the
&lt;a href=&quot;http://mojo.codehaus.org/clirr-maven-plugin/&quot;&gt;Clirr Maven Plugin&lt;/a&gt;.
&lt;br/&gt;
See &lt;a href=&quot;#defaultSince&quot;&gt;defaultSince&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>defaultAuthor</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Default value for the Javadoc tag &lt;code&gt;&amp;#64;author&lt;/code&gt;.
&lt;br/&gt;
If not specified, the &lt;code&gt;user.name&lt;/code&gt; defined in the System properties will be used.</description>
        </parameter>
        <parameter>
          <name>defaultSince</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Default value for the Javadoc tag &lt;code&gt;&amp;#64;since&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>defaultVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Default value for the Javadoc tag &lt;code&gt;&amp;#64;version&lt;/code&gt;.
&lt;br/&gt;
By default, it is &lt;code&gt;&amp;#36;Id:&amp;#36;&lt;/code&gt;, corresponding to a
&lt;a href=&quot;http://svnbook.red-bean.com/en/1.1/ch07s02.html#svn-ch-7-sect-2.3.4&quot;&gt;SVN keyword&lt;/a&gt;.
Refer to your SCM to use an other SCM keyword.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The file encoding to use when reading the source files. If the property
&lt;code&gt;project.build.sourceEncoding&lt;/code&gt; is not set, the platform default encoding is used.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated excludes Java files, i.e. &lt;code&gt;&amp;#42;&amp;#42;/&amp;#42;Test.java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixClassComment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to fix the classes or interfaces Javadoc comments according the &lt;code&gt;level&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixFieldComment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to fix the fields Javadoc comments according the &lt;code&gt;level&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixMethodComment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to fix the methods Javadoc comments according the &lt;code&gt;level&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixTags</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated tags to fix in classes, interfaces or methods Javadoc comments.
Possible values are:
&lt;ul&gt;
&lt;li&gt;all (fix all Javadoc tags)&lt;/li&gt;
&lt;li&gt;author (fix only &amp;#64;author tag)&lt;/li&gt;
&lt;li&gt;version (fix only &amp;#64;version tag)&lt;/li&gt;
&lt;li&gt;since (fix only &amp;#64;since tag)&lt;/li&gt;
&lt;li&gt;param (fix only &amp;#64;param tag)&lt;/li&gt;
&lt;li&gt;return (fix only &amp;#64;return tag)&lt;/li&gt;
&lt;li&gt;throws (fix only &amp;#64;throws tag)&lt;/li&gt;
&lt;li&gt;link (fix only &amp;#64;link tag)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Forcing the goal execution i.e. skip warranty messages (not recommended).</description>
        </parameter>
        <parameter>
          <name>ignoreClirr</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to ignore or not Clirr.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated includes Java files, i.e. &lt;code&gt;&amp;#42;&amp;#42;/&amp;#42;Test.java&lt;/code&gt;.
&lt;p/&gt;
&lt;strong&gt;Note:&lt;/strong&gt; default value is {@code **\/*.java}.</description>
        </parameter>
        <parameter>
          <name>level</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located, used by the tests.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output directory where Java classes will be rewritten.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object.</description>
        </parameter>
        <parameter>
          <name>removeUnknownThrows</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Flag to remove throws tags from unknown classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;Since 3.1.0 the default value has been changed to {@code true}, 
due to JavaDoc 8 strictness.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current user system settings for use in Maven.</description>
        </parameter>
      </parameters>
      <configuration>
        <comparisonVersion implementation="java.lang.String" default-value="(,${project.version})">${comparisonVersion}</comparisonVersion>
        <defaultAuthor implementation="java.lang.String">${defaultAuthor}</defaultAuthor>
        <defaultSince implementation="java.lang.String" default-value="${project.version}">${defaultSince}</defaultSince>
        <defaultVersion implementation="java.lang.String" default-value="$Id: $Id">${defaultVersion}</defaultVersion>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludes implementation="java.lang.String">${excludes}</excludes>
        <fixClassComment implementation="boolean" default-value="true">${fixClassComment}</fixClassComment>
        <fixFieldComment implementation="boolean" default-value="true">${fixFieldComment}</fixFieldComment>
        <fixMethodComment implementation="boolean" default-value="true">${fixMethodComment}</fixMethodComment>
        <fixTags implementation="java.lang.String" default-value="all">${fixTags}</fixTags>
        <force implementation="boolean">${force}</force>
        <ignoreClirr implementation="boolean" default-value="false">${ignoreClirr}</ignoreClirr>
        <includes implementation="java.lang.String" default-value="**\/*.java">${includes}</includes>
        <level implementation="java.lang.String" default-value="protected">${level}</level>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <outputDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}">${outputDirectory}</outputDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <removeUnknownThrows implementation="boolean" default-value="true">${removeUnknownThrows}</removeUnknownThrows>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.components.interactivity.InputHandler</role>
          <field-name>inputHandler</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on maven-javadoc-plugin.&lt;br&gt;
Call &lt;code&gt;mvn javadoc:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.javadoc.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>jar</goal>
      <description>Bundles the Javadoc documentation for &lt;code&gt;main Java code&lt;/code&gt; in an &lt;b&gt;NON aggregator&lt;/b&gt; project into
a jar using the standard &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;
Javadoc Tool&lt;/a&gt;.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.apache.maven.plugins.javadoc.JavadocJar</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The archive configuration to use.
See &lt;a href=&quot;http://maven.apache.org/shared/maven-archiver/index.html&quot;&gt;Maven Archiver Reference&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether to attach the generated artifact to the project helper.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.10</since>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>defaultManifestFile</name>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>true</required>
          <editable>false</editable>
          <description>Path to the default MANIFEST file to use. It will be used if
&lt;code&gt;useDefaultManifestFile&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.io.File</type>
          <deprecated>No reason given</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the filename that will be used for the generated jar file. Please note that &lt;code&gt;-javadoc&lt;/code&gt;
or &lt;code&gt;-test-javadoc&lt;/code&gt; will be appended to the file name.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>jarOutputDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directory where the generated jar file will be put.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useDefaultManifestFile</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to enable the use of the &lt;code&gt;defaultManifestFile&lt;/code&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <attach implementation="boolean" default-value="true">${attach}</attach>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <classifier implementation="java.lang.String" default-value="javadoc">${maven.javadoc.classifier}</classifier>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <defaultManifestFile implementation="java.io.File" default-value="${project.build.outputDirectory}/META-INF/MANIFEST.MF"/>
        <destDir implementation="java.io.File">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <finalName implementation="java.lang.String">${project.build.finalName}</finalName>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <jarOutputDirectory implementation="java.lang.String">${project.build.directory}</jarOutputDirectory>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useDefaultManifestFile implementation="boolean" default-value="false"/>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.archiver.Archiver</role>
          <role-hint>jar</role-hint>
          <field-name>jarArchiver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>javadoc</goal>
      <description>Generates documentation for the &lt;code&gt;Java code&lt;/code&gt; in an &lt;b&gt;NON aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>generate-sources</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.JavadocReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="apidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/apidocs">${reportOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>javadoc-no-fork</goal>
      <description>Generates documentation for the &lt;code&gt;Java code&lt;/code&gt; in an &lt;b&gt;NON aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;. Note that this
goal does require generation of sources before site generation, e.g. by invoking {@code mvn clean deploy site}.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.javadoc.JavadocNoForkReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.10</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="apidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/apidocs">${reportOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>resource-bundle</goal>
      <description>Bundle {@link AbstractJavadocMojo#javadocDirectory}, along with javadoc configuration options such
as taglet, doclet, and link information into a deployable artifact. This artifact can then be consumed
by the javadoc plugin mojos when used by the &lt;code&gt;includeDependencySources&lt;/code&gt; option, to generate
javadocs that are somewhat consistent with those generated in the original project itself.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.apache.maven.plugins.javadoc.ResourcesBundleMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.7</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>Base name of artifacts produced by this project. This will be combined with
{@link ResourcesBundleMojo#getAttachmentClassifier()} to produce the name for this bundle
jar.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-aggregate</goal>
      <description>&lt;p&gt;Generates documentation for the &lt;code&gt;Java Test code&lt;/code&gt; in an &lt;b&gt;aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since version 3.1.0 an aggregated report is created for every module of a Maven multimodule project.&lt;/p&gt;</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.AggregatorTestJavadocReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.5</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where test Javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testDescription</name>
          <alias>description</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testDoctitle</name>
          <alias>doctitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testName</name>
          <alias>name</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testOverview</name>
          <alias>overview</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that Javadoc should retrieve the text for the Test overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).</description>
        </parameter>
        <parameter>
          <name>testWindowtitle</name>
          <alias>windowtitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed in the HTML title tag.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="testapidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/testapidocs">${reportTestOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testDescription implementation="java.lang.String">${testDescription}</testDescription>
        <testDoctitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testDoctitle}</testDoctitle>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <testName implementation="java.lang.String">${testName}</testName>
        <testOverview implementation="java.io.File" default-value="${basedir}/src/test/javadoc/overview.html">${testOverview}</testOverview>
        <testWindowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testWindowtitle}</testWindowtitle>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-aggregate-jar</goal>
      <description>&lt;p&gt;Bundles the Javadoc documentation for &lt;code&gt;Java Test code&lt;/code&gt; in an &lt;b&gt;aggregator&lt;/b&gt; project into a jar
using the standard &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Since version 3.1.0 an aggregated jar is created for every module of a Maven multimodule project.&lt;/p&gt;</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <executePhase>test-compile</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.AggregatorTestJavadocJar</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.6</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The archive configuration to use.
See &lt;a href=&quot;http://maven.apache.org/shared/maven-archiver/index.html&quot;&gt;Maven Archiver Reference&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether to attach the generated artifact to the project helper.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.10</since>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>defaultManifestFile</name>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>true</required>
          <editable>false</editable>
          <description>Path to the default MANIFEST file to use. It will be used if
&lt;code&gt;useDefaultManifestFile&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.io.File</type>
          <deprecated>No reason given</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the filename that will be used for the generated jar file. Please note that &lt;code&gt;-javadoc&lt;/code&gt;
or &lt;code&gt;-test-javadoc&lt;/code&gt; will be appended to the file name.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>jarOutputDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directory where the generated jar file will be put.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where Javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testClassifier</name>
          <type>java.lang.String</type>
          <since>2.10</since>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>testDoctitle</name>
          <alias>doctitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).</description>
        </parameter>
        <parameter>
          <name>testOverview</name>
          <alias>overview</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that Javadoc should retrieve the text for the Test overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).</description>
        </parameter>
        <parameter>
          <name>testWindowtitle</name>
          <alias>windowtitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed in the HTML title tag.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useDefaultManifestFile</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to enable the use of the &lt;code&gt;defaultManifestFile&lt;/code&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <attach implementation="boolean" default-value="true">${attach}</attach>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <classifier implementation="java.lang.String" default-value="javadoc">${maven.javadoc.classifier}</classifier>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <defaultManifestFile implementation="java.io.File" default-value="${project.build.outputDirectory}/META-INF/MANIFEST.MF"/>
        <destDir implementation="java.io.File">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <finalName implementation="java.lang.String">${project.build.finalName}</finalName>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <jarOutputDirectory implementation="java.lang.String">${project.build.directory}</jarOutputDirectory>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/testapidocs"/>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testClassifier implementation="java.lang.String" default-value="test-javadoc">${maven.javadoc.testClassifier}</testClassifier>
        <testDoctitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testDoctitle}</testDoctitle>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <testOverview implementation="java.io.File" default-value="${basedir}/src/test/javadoc/overview.html">${testOverview}</testOverview>
        <testWindowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testWindowtitle}</testWindowtitle>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useDefaultManifestFile implementation="boolean" default-value="false"/>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.archiver.Archiver</role>
          <role-hint>jar</role-hint>
          <field-name>jarArchiver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-aggregate-no-fork</goal>
      <description>Generates documentation for the &lt;code&gt;Java Test code&lt;/code&gt; in an &lt;b&gt;aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.javadoc.AggregatorTestJavadocNoForkReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>3.0.1</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where test Javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testDescription</name>
          <alias>description</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testDoctitle</name>
          <alias>doctitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testName</name>
          <alias>name</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testOverview</name>
          <alias>overview</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that Javadoc should retrieve the text for the Test overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).</description>
        </parameter>
        <parameter>
          <name>testWindowtitle</name>
          <alias>windowtitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed in the HTML title tag.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="testapidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/testapidocs">${reportTestOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testDescription implementation="java.lang.String">${testDescription}</testDescription>
        <testDoctitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testDoctitle}</testDoctitle>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <testName implementation="java.lang.String">${testName}</testName>
        <testOverview implementation="java.io.File" default-value="${basedir}/src/test/javadoc/overview.html">${testOverview}</testOverview>
        <testWindowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testWindowtitle}</testWindowtitle>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-fix</goal>
      <description>Fix Javadoc documentation and tags for the &lt;code&gt;Test Java code&lt;/code&gt; for the project.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.TestFixJavadocMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.6</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>comparisonVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Version to compare the current code against using the
&lt;a href=&quot;http://mojo.codehaus.org/clirr-maven-plugin/&quot;&gt;Clirr Maven Plugin&lt;/a&gt;.
&lt;br/&gt;
See &lt;a href=&quot;#defaultSince&quot;&gt;defaultSince&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>defaultAuthor</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Default value for the Javadoc tag &lt;code&gt;&amp;#64;author&lt;/code&gt;.
&lt;br/&gt;
If not specified, the &lt;code&gt;user.name&lt;/code&gt; defined in the System properties will be used.</description>
        </parameter>
        <parameter>
          <name>defaultSince</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Default value for the Javadoc tag &lt;code&gt;&amp;#64;since&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>defaultVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Default value for the Javadoc tag &lt;code&gt;&amp;#64;version&lt;/code&gt;.
&lt;br/&gt;
By default, it is &lt;code&gt;&amp;#36;Id:&amp;#36;&lt;/code&gt;, corresponding to a
&lt;a href=&quot;http://svnbook.red-bean.com/en/1.1/ch07s02.html#svn-ch-7-sect-2.3.4&quot;&gt;SVN keyword&lt;/a&gt;.
Refer to your SCM to use an other SCM keyword.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The file encoding to use when reading the source files. If the property
&lt;code&gt;project.build.sourceEncoding&lt;/code&gt; is not set, the platform default encoding is used.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated excludes Java files, i.e. &lt;code&gt;&amp;#42;&amp;#42;/&amp;#42;Test.java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixClassComment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to fix the classes or interfaces Javadoc comments according the &lt;code&gt;level&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixFieldComment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to fix the fields Javadoc comments according the &lt;code&gt;level&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixMethodComment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to fix the methods Javadoc comments according the &lt;code&gt;level&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>fixTags</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated tags to fix in classes, interfaces or methods Javadoc comments.
Possible values are:
&lt;ul&gt;
&lt;li&gt;all (fix all Javadoc tags)&lt;/li&gt;
&lt;li&gt;author (fix only &amp;#64;author tag)&lt;/li&gt;
&lt;li&gt;version (fix only &amp;#64;version tag)&lt;/li&gt;
&lt;li&gt;since (fix only &amp;#64;since tag)&lt;/li&gt;
&lt;li&gt;param (fix only &amp;#64;param tag)&lt;/li&gt;
&lt;li&gt;return (fix only &amp;#64;return tag)&lt;/li&gt;
&lt;li&gt;throws (fix only &amp;#64;throws tag)&lt;/li&gt;
&lt;li&gt;link (fix only &amp;#64;link tag)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Forcing the goal execution i.e. skip warranty messages (not recommended).</description>
        </parameter>
        <parameter>
          <name>ignoreClirr</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to ignore or not Clirr.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated includes Java files, i.e. &lt;code&gt;&amp;#42;&amp;#42;/&amp;#42;Test.java&lt;/code&gt;.
&lt;p/&gt;
&lt;strong&gt;Note:&lt;/strong&gt; default value is {@code **\/*.java}.</description>
        </parameter>
        <parameter>
          <name>level</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located, used by the tests.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output directory where Java classes will be rewritten.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object.</description>
        </parameter>
        <parameter>
          <name>removeUnknownThrows</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Flag to remove throws tags from unknown classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;Since 3.1.0 the default value has been changed to {@code true}, 
due to JavaDoc 8 strictness.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current user system settings for use in Maven.</description>
        </parameter>
      </parameters>
      <configuration>
        <comparisonVersion implementation="java.lang.String" default-value="(,${project.version})">${comparisonVersion}</comparisonVersion>
        <defaultAuthor implementation="java.lang.String">${defaultAuthor}</defaultAuthor>
        <defaultSince implementation="java.lang.String" default-value="${project.version}">${defaultSince}</defaultSince>
        <defaultVersion implementation="java.lang.String" default-value="$Id: $Id">${defaultVersion}</defaultVersion>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludes implementation="java.lang.String">${excludes}</excludes>
        <fixClassComment implementation="boolean" default-value="true">${fixClassComment}</fixClassComment>
        <fixFieldComment implementation="boolean" default-value="true">${fixFieldComment}</fixFieldComment>
        <fixMethodComment implementation="boolean" default-value="true">${fixMethodComment}</fixMethodComment>
        <fixTags implementation="java.lang.String" default-value="all">${fixTags}</fixTags>
        <force implementation="boolean">${force}</force>
        <ignoreClirr implementation="boolean" default-value="false">${ignoreClirr}</ignoreClirr>
        <includes implementation="java.lang.String" default-value="**\/*.java">${includes}</includes>
        <level implementation="java.lang.String" default-value="protected">${level}</level>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <outputDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}">${outputDirectory}</outputDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <removeUnknownThrows implementation="boolean" default-value="true">${removeUnknownThrows}</removeUnknownThrows>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.components.interactivity.InputHandler</role>
          <field-name>inputHandler</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-jar</goal>
      <description>Bundles the Javadoc documentation for &lt;code&gt;test Java code&lt;/code&gt; in an &lt;b&gt;NON aggregator&lt;/b&gt; project into
a jar using the standard &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;
Javadoc Tool&lt;/a&gt;.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.apache.maven.plugins.javadoc.TestJavadocJar</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.5</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>archive</name>
          <type>org.apache.maven.archiver.MavenArchiveConfiguration</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The archive configuration to use.
See &lt;a href=&quot;http://maven.apache.org/shared/maven-archiver/index.html&quot;&gt;Maven Archiver Reference&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether to attach the generated artifact to the project helper.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.10</since>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>defaultManifestFile</name>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>true</required>
          <editable>false</editable>
          <description>Path to the default MANIFEST file to use. It will be used if
&lt;code&gt;useDefaultManifestFile&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.io.File</type>
          <deprecated>No reason given</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the filename that will be used for the generated jar file. Please note that &lt;code&gt;-javadoc&lt;/code&gt;
or &lt;code&gt;-test-javadoc&lt;/code&gt; will be appended to the file name.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>jarOutputDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directory where the generated jar file will be put.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where Javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testClassifier</name>
          <type>java.lang.String</type>
          <since>2.10</since>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>testDoctitle</name>
          <alias>doctitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).</description>
        </parameter>
        <parameter>
          <name>testOverview</name>
          <alias>overview</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that Javadoc should retrieve the text for the Test overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).</description>
        </parameter>
        <parameter>
          <name>testWindowtitle</name>
          <alias>windowtitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed in the HTML title tag.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useDefaultManifestFile</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to enable the use of the &lt;code&gt;defaultManifestFile&lt;/code&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <attach implementation="boolean" default-value="true">${attach}</attach>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <classifier implementation="java.lang.String" default-value="javadoc">${maven.javadoc.classifier}</classifier>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <defaultManifestFile implementation="java.io.File" default-value="${project.build.outputDirectory}/META-INF/MANIFEST.MF"/>
        <destDir implementation="java.io.File">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <finalName implementation="java.lang.String">${project.build.finalName}</finalName>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <jarOutputDirectory implementation="java.lang.String">${project.build.directory}</jarOutputDirectory>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/testapidocs"/>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testClassifier implementation="java.lang.String" default-value="test-javadoc">${maven.javadoc.testClassifier}</testClassifier>
        <testDoctitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testDoctitle}</testDoctitle>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <testOverview implementation="java.io.File" default-value="${basedir}/src/test/javadoc/overview.html">${testOverview}</testOverview>
        <testWindowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testWindowtitle}</testWindowtitle>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useDefaultManifestFile implementation="boolean" default-value="false"/>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.archiver.Archiver</role>
          <role-hint>jar</role-hint>
          <field-name>jarArchiver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-javadoc</goal>
      <description>Generates documentation for the &lt;code&gt;Java Test code&lt;/code&gt; in an &lt;b&gt;NON aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>generate-test-sources</executePhase>
      <implementation>org.apache.maven.plugins.javadoc.TestJavadocReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.3</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where test Javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testDescription</name>
          <alias>description</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testDoctitle</name>
          <alias>doctitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testName</name>
          <alias>name</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testOverview</name>
          <alias>overview</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that Javadoc should retrieve the text for the Test overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).</description>
        </parameter>
        <parameter>
          <name>testWindowtitle</name>
          <alias>windowtitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed in the HTML title tag.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="testapidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/testapidocs">${reportTestOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testDescription implementation="java.lang.String">${testDescription}</testDescription>
        <testDoctitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testDoctitle}</testDoctitle>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <testName implementation="java.lang.String">${testName}</testName>
        <testOverview implementation="java.io.File" default-value="${basedir}/src/test/javadoc/overview.html">${testOverview}</testOverview>
        <testWindowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testWindowtitle}</testWindowtitle>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-javadoc-no-fork</goal>
      <description>Generates documentation for the &lt;code&gt;Java Test code&lt;/code&gt; in an &lt;b&gt;NON aggregator&lt;/b&gt; project using the standard
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html&quot;&gt;Javadoc Tool&lt;/a&gt;. Note that this
goal does require generation of test sources before site generation, e.g. by invoking
{@code mvn clean deploy site}.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.javadoc.TestJavadocNoForkReport</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.10</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>destDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the destination directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>name</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>reportOutputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where test Javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testDescription</name>
          <alias>description</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The description of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testDoctitle</name>
          <alias>doctitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testName</name>
          <alias>name</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the Test Javadoc report to be displayed in the Maven Generated Reports page
(i.e. &lt;code&gt;project-reports.html&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>testOverview</name>
          <alias>overview</alias>
          <type>java.io.File</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that Javadoc should retrieve the text for the Test overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).</description>
        </parameter>
        <parameter>
          <name>testWindowtitle</name>
          <alias>windowtitle</alias>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test title to be placed in the HTML title tag.</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <description implementation="java.lang.String">${description}</description>
        <destDir implementation="java.lang.String" default-value="testapidocs">${destDir}</destDir>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <name implementation="java.lang.String">${name}</name>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <reportOutputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/testapidocs">${reportTestOutputDirectory}</reportOutputDirectory>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testDescription implementation="java.lang.String">${testDescription}</testDescription>
        <testDoctitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testDoctitle}</testDoctitle>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <testName implementation="java.lang.String">${testName}</testName>
        <testOverview implementation="java.io.File" default-value="${basedir}/src/test/javadoc/overview.html">${testOverview}</testOverview>
        <testWindowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} Test API">${testWindowtitle}</testWindowtitle>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>test-resource-bundle</goal>
      <description>Bundle {@link TestJavadocJar#testJavadocDirectory}, along with javadoc configuration options from
{@link AbstractJavadocMojo} such as taglet, doclet, and link information into a deployable
artifact. This artifact can then be consumed by the javadoc plugin mojos when used by the
&lt;code&gt;includeDependencySources&lt;/code&gt; option, to generate javadocs that are somewhat consistent
with those generated in the original project itself.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.apache.maven.plugins.javadoc.TestResourcesBundleMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.7</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addStylesheets</name>
          <type>java.lang.String[]</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an additional HTML stylesheet file relative to the {@code javadocDirectory}
Example:
&lt;pre&gt;
    &amp;lt;addStylesheets&amp;gt;
        &amp;lt;resources/addstylesheet.css&amp;lt;/addStylesheet&amp;gt;
    &amp;lt;/addStylesheets&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalDependencies</name>
          <type>java.util.List</type>
          <since>2.8.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Capability to add additional dependencies to the javadoc classpath.
Example:
&lt;pre&gt;
&amp;lt;additionalDependencies&amp;gt;
  &amp;lt;additionalDependency&amp;gt;
    &amp;lt;groupId&amp;gt;geronimo-spec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;geronimo-spec-jta&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1B-rc4&amp;lt;/version&amp;gt;
  &amp;lt;/additionalDependency&amp;gt;
&amp;lt;/additionalDependencies&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOption</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options (e.g. JVM options) on the command line.
Example:
&lt;pre&gt;
&amp;lt;additionalJOption&amp;gt;-J-Xss128m&amp;lt;/additionalJOption&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalJOptions</name>
          <type>java.lang.String[]</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets additional Javadoc options for the execution of the javadoc command via the &apos;-J&apos; option to javadoc.
Example:
&lt;pre&gt;
    &amp;lt;additionalJOptions&amp;gt;
        &amp;lt;additionalJOption&amp;gt;-J-Xmx1g &amp;lt;/additionalJOption&amp;gt;
    &amp;lt;/additionalJOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>additionalOptions</name>
          <type>java.lang.String[]</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set an additional option(s) on the command line. All input will be passed as-is to the
{@code @options} file. You must take care of quoting and escaping. Useful for a custom doclet.</description>
        </parameter>
        <parameter>
          <name>applyJavadocSecurityFix</name>
          <type>boolean</type>
          <since>2.9.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To apply a security fix on generated javadoc, see 
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1571&gt;CVE-2013-157&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>author</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether or not the author text is included in the generated Javadocs.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the paths where the boot classes reside. The &lt;code&gt;bootclasspath&lt;/code&gt; can contain multiple paths
by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>bootclasspathArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifacts where the boot classes reside.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;bootclasspathArtifacts&amp;gt;
  &amp;lt;bootclasspathArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;my-groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;my-artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;my-version&amp;lt;/version&amp;gt;
  &amp;lt;/bootclasspathArtifact&amp;gt;
&amp;lt;/bootclasspathArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/BootclasspathArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>bottom</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the text to be placed at the bottom of each output file.&lt;br/&gt;
If you want to use html, you have to put it in a CDATA section, &lt;br/&gt;
e.g. &lt;code&gt;&amp;lt;![CDATA[Copyright 2005, &amp;lt;a href=&quot;http://www.mycompany.com&quot;&gt;MyCompany, Inc.&amp;lt;a&gt;]]&amp;gt;&lt;/code&gt;
&lt;br&gt;
&lt;strong&gt;Note:&lt;strong&gt;If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, its year will
be used as {currentYear}. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>breakiterator</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Uses the sentence break iterator to determine the end of the first sentence.</description>
        </parameter>
        <parameter>
          <name>charset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the HTML character set for this document. If not specified, the charset value will be the value of
the {@link #docencoding} parameter.</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &lt;code&gt;true&lt;/code&gt; to debug the Javadoc plugin. With this, &lt;code&gt;javadoc.bat(or.sh)&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;@packages&lt;/code&gt; or &lt;code&gt;argfile&lt;/code&gt; files are provided in the output directory.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>dependencyLinks</name>
          <type>java.util.List</type>
          <since>3.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Redefine the apidoc URL for specific dependencies when using {@link #detectLinks}.
Useful if the dependency wasn&apos;t build with Maven or when the apidocs have been moved.
&lt;pre&gt;
&amp;lt;dependencyLinks&amp;gt;
  &amp;lt;dependencyLink&amp;gt;
    &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
    &amp;lt;classifier&amp;gt;classifier&amp;lt;/classifier&amp;gt; &amp;lt;!-- optional --&amp;gt;
    &amp;lt;url&amp;gt;version&amp;lt;/url&amp;gt;
  &amp;lt;/dependencyLink&amp;gt;
&amp;lt;/dependencyLinks&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceExcludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of excluded dependency-source patterns. Example: &lt;code&gt;org.apache.maven.shared:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>dependencySourceIncludes</name>
          <type>java.util.List</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of included dependency-source patterns. Example: &lt;code&gt;org.apache.maven:*&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>detectJavaApiLink</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Java API link for the current build, i.e. &lt;code&gt;https://docs.oracle.com/javase/1.4.2/docs/api/&lt;/code&gt;
for Java source 1.4.
&lt;br/&gt;
By default, the goal detects the Javadoc API link depending the value of the &lt;code&gt;source&lt;/code&gt;
parameter in the &lt;code&gt;org.apache.maven.plugins:maven-compiler-plugin&lt;/code&gt;
(defined in &lt;code&gt;${project.build.plugins}&lt;/code&gt; or in &lt;code&gt;${project.build.pluginManagement}&lt;/code&gt;),
or try to compute it from the {@code javadocExecutable} version.</description>
        </parameter>
        <parameter>
          <name>detectLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the Javadoc links for all dependencies defined in the project. The detection is based on the default
Maven conventions, i.e.: &lt;code&gt;${project.url}/apidocs&lt;/code&gt;.
&lt;br/&gt;
For instance, if the project has a dependency to
&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt; i.e.:
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
The added Javadoc &lt;code&gt;-link&lt;/code&gt; parameter will be &lt;code&gt;http://commons.apache.org/lang/apidocs&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>detectOfflineLinks</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Detect the links for all modules defined in the project.
&lt;br/&gt;
If {@code reactorProjects} is defined in a non-aggregator way, it generates default offline links
between modules based on the defined project&apos;s urls. For instance, if a parent project has two projects
&lt;code&gt;module1&lt;/code&gt; and &lt;code&gt;module2&lt;/code&gt;, the &lt;code&gt;-linkoffline&lt;/code&gt; will be:
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module1&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module2&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;
&lt;br/&gt;
The added Javadoc &lt;code&gt;-linkoffline&lt;/code&gt; parameter for &lt;b&gt;module2&lt;/b&gt; will be
&lt;code&gt;/absolute/path/to/&lt;/code&gt;&lt;b&gt;module1&lt;/b&gt;&lt;code&gt;/target/site/apidocs&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>docencoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding of the generated HTML files. If not specified, the docencoding value will be
&lt;code&gt;UTF-8&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>docfilessubdirs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables deep copying of the &lt;code&gt;&amp;#42;&amp;#42;/doc-files&lt;/code&gt; directories and the specifc &lt;code&gt;resources&lt;/code&gt;
directory from the &lt;code&gt;javadocDirectory&lt;/code&gt; directory (for instance,
&lt;code&gt;src/main/javadoc/com/mycompany/myapp/doc-files&lt;/code&gt; and &lt;code&gt;src/main/javadoc/resources&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the doclet used in generating the documentation.</description>
        </parameter>
        <parameter>
          <name>docletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the artifact containing the doclet starting class file (specified with the {@link #doclet}
option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
&amp;lt;/docletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.DocletArtifact[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies multiple artifacts containing the path for the doclet starting class file (specified with the
{@link #doclet} option).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/DocletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>docletPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path to the doclet starting class file (specified with the {@link #doclet} option) and
any jar files it depends on. The &lt;code&gt;docletPath&lt;/code&gt; can contain multiple paths by separating them with
a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>doclint</name>
          <type>java.lang.String</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies specific checks to be performed on Javadoc comments.</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the encoding name of the source files. If not specified, the encoding value will be the value of the
&lt;code&gt;file.encoding&lt;/code&gt; system property.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: In 2.4, the default value was locked to &lt;code&gt;ISO-8859-1&lt;/code&gt; to ensure reproducing build, but
this was reverted in 2.5.</description>
        </parameter>
        <parameter>
          <name>excludePackageNames</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unconditionally excludes the specified packages and their subpackages from the list formed by
&lt;code&gt;-subpackages&lt;/code&gt;. Multiple packages can be separated by commas (&lt;code&gt;,&lt;/code&gt;), colons (&lt;code&gt;:&lt;/code&gt;)
or semicolons (&lt;code&gt;;&lt;/code&gt;).
&lt;p&gt;
Wildcards work as followed:
&lt;ul&gt;
  &lt;li&gt;a wildcard at the beginning should match 1 or more folders&lt;/li&gt;
  &lt;li&gt;any other wildcard must match exactly one folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
Example:
&lt;pre&gt;
&amp;lt;excludePackageNames&amp;gt;*.internal:org.acme.exclude1.*:org.acme.exclude2&amp;lt;/excludePackageNames&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>excludedocfilessubdir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Excludes any &quot;doc-files&quot; subdirectories with the given names. Multiple patterns can be excluded
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>extdirs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the directories where extension classes reside. Separate directories in &lt;code&gt;extdirs&lt;/code&gt; with a
colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are errors during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>failOnWarnings</name>
          <type>boolean</type>
          <since>3.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies if the build will fail if there are warning during javadoc execution or not.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>Base name of artifacts produced by this project. This will be combined with
{@link ResourcesBundleMojo#getAttachmentClassifier()} to produce the name for this bundle
jar.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the footer text to be placed at the bottom of each output file.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>org.apache.maven.plugins.javadoc.options.Group[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Separates packages on the overview page into whatever groups you specify, one group per table. The
packages pattern can be any package name, or can be the start of any package name followed by an asterisk
(&lt;code&gt;*&lt;/code&gt;) meaning &quot;match any characters&quot;. Multiple patterns can be included in a group
by separating them with colons (&lt;code&gt;:&lt;/code&gt;).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;groups&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Core Packages&amp;lt;/title&amp;gt;
    &amp;lt;!-- To includes java.lang, java.lang.ref,
    java.lang.reflect and only java.util
    (i.e. not java.util.jar) --&amp;gt;
    &amp;lt;packages&amp;gt;java.lang*:java.util&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
  &amp;lt;group&amp;gt;
    &amp;lt;title&amp;gt;Extension Packages&amp;lt;/title&amp;gt;
    &amp;nbsp;&amp;lt;!-- To include javax.accessibility,
    javax.crypto, ... (among others) --&amp;gt;
    &amp;lt;packages&amp;gt;javax.*&amp;lt;/packages&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/groups&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: using &lt;code&gt;java.lang.*&lt;/code&gt; for &lt;code&gt;packages&lt;/code&gt; would omit the &lt;code&gt;java.lang&lt;/code&gt;
package but using &lt;code&gt;java.lang*&lt;/code&gt; will include it.</description>
        </parameter>
        <parameter>
          <name>header</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the header text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>helpfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate help file path\filename that the HELP link in the top and bottom
navigation bars link to.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with &amp;lt;nohelp/&amp;gt;.
&lt;br/&gt;
The &lt;code&gt;helpfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;helpfile&amp;gt;path/to/your/resource/yourhelp-doc.html&amp;lt;/helpfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourhelp-doc.html&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>includeDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether dependency -sources jars should be resolved and included as source paths for javadoc generation.
This is useful when creating javadocs for a distribution project.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencySources</name>
          <type>boolean</type>
          <since>2.7</since>
          <deprecated>if these sources depend on transitive dependencies, those dependencies should be added to the pom as
            direct dependencies</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include transitive dependencies in the list of dependency -sources jars to include in this javadoc
run.</description>
        </parameter>
        <parameter>
          <name>isOffline</name>
          <type>boolean</type>
          <required>true</required>
          <editable>false</editable>
          <description>Specify if the Javadoc should operate in offline mode.</description>
        </parameter>
        <parameter>
          <name>javaApiLinks</name>
          <type>java.util.Properties</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use this parameter &lt;b&gt;only&lt;/b&gt; if if you want to override the default URLs.

The key should match {@code api_x}, where {@code x} matches the Java version.

 For example:
 &lt;dl&gt;
  &lt;dt&gt;api_1.5&lt;/dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/1.5.0/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_1.8&lt;dt&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/8/docs/api/&lt;/dd&gt;
  &lt;dt&gt;api_9&lt;/dd&gt;
  &lt;dd&gt;https://docs.oracle.com/javase/9/docs/api/&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>javadocDirectory</name>
          <type>java.io.File</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).
&lt;br/&gt;
Could be used in addition of &lt;code&gt;docfilessubdirs&lt;/code&gt; parameter.
&lt;br/&gt;
See &lt;a href=&quot;#docfilessubdirs&quot;&gt;docfilessubdirs&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>javadocExecutable</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the absolute path of the Javadoc Tool executable to use. Since version 2.5, a mere directory specification
is sufficient to have the plugin use &quot;javadoc&quot; or &quot;javadoc.exe&quot; respectively from this directory.</description>
        </parameter>
        <parameter>
          <name>javadocOptionsDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>false</editable>
          <description>Directory into which assembled {@link JavadocOptions} instances will be written before they
are added to javadoc resources bundles.</description>
        </parameter>
        <parameter>
          <name>javadocVersion</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Version of the Javadoc Tool executable to use, ex. &quot;1.3&quot;, &quot;1.5&quot;.</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Allow for configuration of the javadoc tool via maven toolchains.
This overrules the toolchain selected by the maven-toolchain-plugin.
&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
(see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt;
    Guide to Toolchains&lt;/a&gt; for more info)

&lt;pre&gt;
{@code
   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;11&lt;/version&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;

   &lt;configuration&gt;
       ...
       &lt;jdkToolchain&gt;
           &lt;version&gt;1.8&lt;/version&gt;
           &lt;vendor&gt;zulu&lt;/vendor&gt;
       &lt;/jdkToolchain&gt;
   &lt;/configuration&gt;
   }
&lt;/pre&gt;

&lt;strong&gt;note:&lt;/strong&gt; requires at least Maven 3.3.1</description>
        </parameter>
        <parameter>
          <name>keywords</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Adds HTML meta keyword tags to the generated file for each class.</description>
        </parameter>
        <parameter>
          <name>links</name>
          <type>java.util.ArrayList</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates links to existing javadoc-generated documentation of external referenced classes.
&lt;br&gt;
&lt;b&gt;Notes&lt;/b&gt;:
&lt;ol&gt;
&lt;li&gt;only used if {@code isOffline} is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;all given links should have a fetchable &lt;code&gt;/package-list&lt;/code&gt; or &lt;code&gt;/element-list&lt;/code&gt; 
(since Java 10). For instance:
&lt;pre&gt;
&amp;lt;links&amp;gt;
  &amp;lt;link&amp;gt;https://docs.oracle.com/en/java/javase/17/docs/api&amp;lt;/link&amp;gt;
&amp;lt;links&amp;gt;
&lt;/pre&gt;
will be used because &lt;code&gt;https://docs.oracle.com/en/java/javase/17/docs/api/element-list&lt;/code&gt; exists.&lt;/li&gt;
&lt;li&gt;if {@link #detectLinks} is defined, the links between the project dependencies are
automatically added.&lt;/li&gt;
&lt;li&gt;if {@link #detectJavaApiLink} is defined, a Java API link, based on the Java version of the
project&apos;s sources, will be added automatically.&lt;/li&gt;
&lt;/ol&gt;</description>
        </parameter>
        <parameter>
          <name>linksource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates an HTML version of each source file (with line numbers) and adds links to them from the standard
HTML documentation.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description>The local repository where the artifacts are located.</description>
        </parameter>
        <parameter>
          <name>locale</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the locale that javadoc uses when generating documentation.</description>
        </parameter>
        <parameter>
          <name>maxmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the maximum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xmx&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>minmemory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the minimum Java heap size to be used when launching the Javadoc tool.
JVMs refer to this property as the &lt;code&gt;-Xms&lt;/code&gt; parameter. Example: &apos;512&apos; or &apos;512m&apos;.
The memory unit depends on the JVM used. The units supported could be: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;kb&lt;/code&gt;,
&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;mb&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;tb&lt;/code&gt;.
If no unit specified, the default unit is &lt;code&gt;m&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nocomment</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress the entire comment body, including the main description and all tags, generating only declarations.</description>
        </parameter>
        <parameter>
          <name>nodeprecated</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of any deprecated API at all in the documentation.</description>
        </parameter>
        <parameter>
          <name>nodeprecatedlist</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Prevents the generation of the file containing the list of deprecated APIs (deprecated-list.html) and the
link in the navigation bar to that page.</description>
        </parameter>
        <parameter>
          <name>nohelp</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the HELP link in the navigation bars at the top and bottom of each page of output.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #helpfile}.</description>
        </parameter>
        <parameter>
          <name>noindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the index from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #splitindex}</description>
        </parameter>
        <parameter>
          <name>nonavbar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the navigation bar from the generated docs.</description>
        </parameter>
        <parameter>
          <name>nooverview</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the entire overview page from the generated docs.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #overview}.
&lt;br/&gt;
Standard Doclet undocumented option.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>noqualifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits qualifying package name from ahead of class names in output.
Example:
&lt;pre&gt;
&amp;lt;noqualifier&amp;gt;all&amp;lt;/noqualifier&amp;gt;
or
&amp;lt;noqualifier&amp;gt;packagename1:packagename2&amp;lt;/noqualifier&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>nosince</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits from the generated docs the &quot;Since&quot; sections associated with the since tags.</description>
        </parameter>
        <parameter>
          <name>notimestamp</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Suppresses the timestamp, which is hidden in an HTML comment in the generated HTML near the top of each page.
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If the project has the property &lt;code&gt;project.build.outputTimestamp&lt;/code&gt;, the value
will be overwritten to true. This way it is possible to generate reproducible javadoc jars.</description>
        </parameter>
        <parameter>
          <name>notree</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Omits the class/interface hierarchy pages from the generated docs.</description>
        </parameter>
        <parameter>
          <name>offlineLinks</name>
          <type>org.apache.maven.plugins.javadoc.options.OfflineLink[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option is a variation of {@link #links}; they both create links to javadoc-generated documentation
for external referenced classes.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;offlineLinks&amp;gt;
  &amp;lt;offlineLink&amp;gt;
    &amp;lt;url&amp;gt;https://docs.oracle.com/javase/1.5.0/docs/api/&amp;lt;/url&amp;gt;
    &amp;lt;location&amp;gt;../javadoc/jdk-5.0/&amp;lt;/location&amp;gt;
  &amp;lt;/offlineLink&amp;gt;
&amp;lt;/offlineLinks&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: if {@link #detectOfflineLinks} is defined, the offline links between the project modules are
automatically added if the goal is calling in a non-aggregator way.</description>
        </parameter>
        <parameter>
          <name>old</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>This option creates documentation with the appearance and functionality of documentation generated by
Javadoc 1.1. This is no longer supported since Javadoc 1.4 (shipped with JDK 1.4)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <alias>destDir</alias>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Specifies the destination directory where javadoc saves the generated HTML files.</description>
        </parameter>
        <parameter>
          <name>outputTimestamp</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timestamp for reproducible output archive entries, either formatted as ISO 8601
&lt;code&gt;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&lt;/code&gt; or as an int representing seconds since the epoch (like
&lt;a href=&quot;https://reproducible-builds.org/docs/source-date-epoch/&quot;&gt;SOURCE_DATE_EPOCH&lt;/a&gt;).</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file
specified by path/filename and place it on the Overview page (overview-summary.html).
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #nooverview}.</description>
        </parameter>
        <parameter>
          <name>packagesheader</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the text for upper left frame.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shuts off non-error and non-warning messages, leaving only the warnings and errors appear, making them
easier to view.
&lt;br/&gt;
Note: was a standard doclet in Java 1.4.2 (refer to bug ID
&lt;a href=&quot;https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4714350&quot;&gt;4714350&lt;/a&gt;).
&lt;br/&gt;
Since Java 5.0.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The projects in the reactor for aggregation report.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>java.lang.String</type>
          <since>JDK 9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release</description>
        </parameter>
        <parameter>
          <name>resourcesArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of artifacts containing resources which should be copied into the
Javadoc output directory (like stylesheets, icons, etc.).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;resourcesArtifacts&amp;gt;
  &amp;lt;resourcesArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;external.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;external-resources&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;/resourcesArtifact&amp;gt;
&amp;lt;/resourcesArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/ResourcesArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>serialwarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates compile-time warnings for missing serial tags.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for
toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>settings</name>
          <type>org.apache.maven.settings.Settings</type>
          <since>2.3</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Settings.</description>
        </parameter>
        <parameter>
          <name>show</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the access level for classes and members to show in the Javadocs.
Possible values are:
&lt;ul&gt;
&lt;li&gt;public (shows only public classes and members)&lt;/li&gt;
&lt;li&gt;protected (shows only public and protected classes and members)&lt;/li&gt;
&lt;li&gt;package (shows all classes and members not marked private)&lt;/li&gt;
&lt;li&gt;private (shows all classes and members)&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the Javadoc generation should be skipped.</description>
        </parameter>
        <parameter>
          <name>skippedModules</name>
          <type>java.lang.String</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Comma separated list of modules (artifactId) to not add in aggregated javadoc
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provide source compatibility with specified release. Since JDK 9 rather use {@link #release}.</description>
        </parameter>
        <parameter>
          <name>sourceDependencyCacheDir</name>
          <type>java.io.File</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory where unpacked project sources / test-sources should be cached.</description>
        </parameter>
        <parameter>
          <name>sourceFileExcludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>exclude filters on the source files.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourceFileIncludes</name>
          <type>java.util.List</type>
          <since>2.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include filters on the source files. Default is **\/\*.java.
These are ignored if you specify subpackages or subpackage excludes.</description>
        </parameter>
        <parameter>
          <name>sourcepath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the source paths where the subpackages are located. The &lt;code&gt;sourcepath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>sourcetab</name>
          <alias>linksourcetab</alias>
          <type>int</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the number of spaces each tab takes up in the source. If no tab is used in source, the default
space is used.</description>
        </parameter>
        <parameter>
          <name>splitindex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Splits the index file into multiple files, alphabetically, one file per letter, plus a file for any index
entries that start with non-alphabetical characters.
&lt;br/&gt;
&lt;b&gt;Note&lt;/b&gt;: could be in conflict with {@link #noindex}.</description>
        </parameter>
        <parameter>
          <name>staleDataPath</name>
          <type>java.io.File</type>
          <since>3.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Location of the file used to store the state of the previous javadoc run.
This is used to skip the generation if nothing has changed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>stylesheet</name>
          <type>java.lang.String</type>
          <deprecated>This is no longer evaluated, instead use {@link #addStylesheets} to customize the CSS.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether the stylesheet to be used is the &lt;code&gt;maven&lt;/code&gt;&apos;s javadoc stylesheet or
&lt;code&gt;java&lt;/code&gt;&apos;s default stylesheet when a {@link #stylesheetfile} parameter is not specified.
&lt;br/&gt;
Possible values: &lt;code&gt;maven&lt;code&gt; or &lt;code&gt;java&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>stylesheetfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the path of an alternate HTML stylesheet file.
&lt;br/&gt;
The &lt;code&gt;stylesheetfile&lt;/code&gt; could be an absolute File path.
&lt;br/&gt;
Since 2.6, it could be also be a path from a resource in the current project source directories
(i.e. &lt;code&gt;src/main/java&lt;/code&gt;, &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/javadoc&lt;/code&gt;)
or from a resource in the Javadoc plugin dependencies, for instance:
&lt;pre&gt;
&amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; could be in &lt;code&gt;src/main/javadoc&lt;/code&gt;.
&lt;pre&gt;
&amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;stylesheetfile&amp;gt;path/to/your/resource/yourstylesheet.css&amp;lt;/stylesheetfile&amp;gt;
        ...
      &amp;lt;/configuration&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;groupId&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;artifactId&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;version&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/plugin&amp;gt;
    ...
  &amp;lt;plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;
Where &lt;code&gt;path/to/your/resource/yourstylesheet.css&lt;/code&gt; is defined in the
&lt;code&gt;groupId:artifactId:version&lt;/code&gt; javadoc plugin dependency.</description>
        </parameter>
        <parameter>
          <name>subpackages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the package directory where javadoc will be executed. Multiple packages can be separated by
colons (&lt;code&gt;:&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglet</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the class file that starts the taglet used in generating the documentation for that tag.</description>
        </parameter>
        <parameter>
          <name>tagletArtifact</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Taglet artifact containing the taglet class files (.class).
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;package.to.AnotherTagletClass&amp;lt;/tagletClass&amp;gt;
  &amp;lt;/taglet&amp;gt;
  ...
&amp;lt;/taglets&amp;gt;
&amp;lt;tagletArtifact&amp;gt;
  &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
&amp;lt;/tagletArtifact&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletArtifacts</name>
          <type>org.apache.maven.plugins.javadoc.options.TagletArtifact[]</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies several Taglet artifacts containing the taglet class files (.class). These taglets class names will be
auto-detect and so no need to specify them.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tagletArtifacts&amp;gt;
  &amp;lt;tagletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
  &amp;lt;/tagletArtifact&amp;gt;
  ...
&amp;lt;/tagletArtifacts&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/TagletArtifact.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>tagletpath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the search paths for finding taglet class files (.class). The &lt;code&gt;tagletpath&lt;/code&gt; can contain
multiple paths by separating them with a colon (&lt;code&gt;:&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;).</description>
        </parameter>
        <parameter>
          <name>taglets</name>
          <type>org.apache.maven.plugins.javadoc.options.Taglet[]</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret multiple taglets.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;taglets&amp;gt;
  &amp;lt;taglet&amp;gt;
    &amp;lt;tagletClass&amp;gt;com.sun.tools.doclets.ToDoTaglet&amp;lt;/tagletClass&amp;gt;
    &amp;lt;!--&amp;lt;tagletpath&amp;gt;/home/taglets&amp;lt;/tagletpath&amp;gt;--&amp;gt;
    &amp;lt;tagletArtifact&amp;gt;
      &amp;lt;groupId&amp;gt;group-Taglet&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;artifact-Taglet&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;version-Taglet&amp;lt;/version&amp;gt;
    &amp;lt;/tagletArtifact&amp;gt;
  &amp;lt;/taglet&amp;gt;
&amp;lt;/taglets&amp;gt;
&lt;/pre&gt;
&lt;br/&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Taglet.html&quot;&gt;Javadoc&lt;/a&gt;.
&lt;br/&gt;</description>
        </parameter>
        <parameter>
          <name>tags</name>
          <type>org.apache.maven.plugins.javadoc.options.Tag[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the Javadoc tool to interpret a simple, one-argument custom block tag tagname in doc comments.
&lt;br/&gt;
Example:
&lt;pre&gt;
&amp;lt;tags&amp;gt;
  &amp;lt;tag&amp;gt;
    &amp;lt;name&amp;gt;todo&amp;lt;/name&amp;gt;
    &amp;lt;placement&amp;gt;a&amp;lt;/placement&amp;gt;
    &amp;lt;head&amp;gt;To Do:&amp;lt;/head&amp;gt;
  &amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&lt;/pre&gt;
&lt;b&gt;Note&lt;/b&gt;: the placement should be a combinaison of Xaoptcmf letters:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;X&lt;/code&gt;&lt;/b&gt; (disable tag)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt; (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;o&lt;/code&gt;&lt;/b&gt; (overview)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt; (packages)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;t&lt;/code&gt;&lt;/b&gt; (types, that is classes and interfaces)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;c&lt;/code&gt;&lt;/b&gt; (constructors)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;m&lt;/code&gt;&lt;/b&gt; (methods)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;code&gt;f&lt;/code&gt;&lt;/b&gt; (fields)&lt;/li&gt;
&lt;/ul&gt;
See &lt;a href=&quot;./apidocs/org/apache/maven/plugins/javadoc/options/Tag.html&quot;&gt;Javadoc&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testJavadocDirectory</name>
          <alias>javadocDirectory</alias>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the Test Javadoc resources directory to be included in the Javadoc (i.e. package.html, images...).</description>
        </parameter>
        <parameter>
          <name>top</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the top text to be placed at the top of each output file.</description>
        </parameter>
        <parameter>
          <name>use</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes one &quot;Use&quot; page for each documented class and package.</description>
        </parameter>
        <parameter>
          <name>useStandardDocletOptions</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies to use the
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#standard-doclet-options&quot;&gt;
options provided by the Standard Doclet&lt;/a&gt; for a custom doclet.
&lt;br&gt;
Example:
&lt;pre&gt;
&amp;lt;docletArtifacts&amp;gt;
  &amp;lt;docletArtifact&amp;gt;
    &amp;lt;groupId&amp;gt;com.sun.tools.doclets&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;doccheck&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2b2&amp;lt;/version&amp;gt;
  &amp;lt;/docletArtifact&amp;gt;
&amp;lt;/docletArtifacts&amp;gt;
&amp;lt;useStandardDocletOptions&amp;gt;true&amp;lt;/useStandardDocletOptions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>validateLinks</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag controlling content validation of &lt;code&gt;package-list&lt;/code&gt; resources. If set, the content of
&lt;code&gt;package-list&lt;/code&gt; resources will be validated.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Includes the given version text in the generated docs.</description>
        </parameter>
        <parameter>
          <name>windowtitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed in the HTML title tag.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalJOption implementation="java.lang.String">${additionalJOption}</additionalJOption>
        <applyJavadocSecurityFix implementation="boolean" default-value="true">${maven.javadoc.applyJavadocSecurityFix}</applyJavadocSecurityFix>
        <author implementation="boolean" default-value="true">${author}</author>
        <bootclasspath implementation="java.lang.String">${bootclasspath}</bootclasspath>
        <bootclasspathArtifacts implementation="org.apache.maven.plugins.javadoc.options.BootclasspathArtifact[]">${bootclasspathArtifacts}</bootclasspathArtifacts>
        <bottom implementation="java.lang.String" default-value="Copyright &amp;#169; {inceptionYear}&amp;#x2013;{currentYear} {organizationName}. All rights reserved.">${bottom}</bottom>
        <breakiterator implementation="boolean" default-value="false">${breakiterator}</breakiterator>
        <charset implementation="java.lang.String">${charset}</charset>
        <debug implementation="boolean" default-value="false">${debug}</debug>
        <detectJavaApiLink implementation="boolean" default-value="true">${detectJavaApiLink}</detectJavaApiLink>
        <detectLinks implementation="boolean" default-value="false">${detectLinks}</detectLinks>
        <detectOfflineLinks implementation="boolean" default-value="true">${detectOfflineLinks}</detectOfflineLinks>
        <docencoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${docencoding}</docencoding>
        <docfilessubdirs implementation="boolean" default-value="false">${docfilessubdirs}</docfilessubdirs>
        <doclet implementation="java.lang.String">${doclet}</doclet>
        <docletArtifact implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact">${docletArtifact}</docletArtifact>
        <docletArtifacts implementation="org.apache.maven.plugins.javadoc.options.DocletArtifact[]">${docletArtifacts}</docletArtifacts>
        <docletPath implementation="java.lang.String">${docletPath}</docletPath>
        <doclint implementation="java.lang.String">${doclint}</doclint>
        <doctitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${doctitle}</doctitle>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <excludePackageNames implementation="java.lang.String">${excludePackageNames}</excludePackageNames>
        <excludedocfilessubdir implementation="java.lang.String">${excludedocfilessubdir}</excludedocfilessubdir>
        <extdirs implementation="java.lang.String">${extdirs}</extdirs>
        <failOnError implementation="boolean" default-value="true">${maven.javadoc.failOnError}</failOnError>
        <failOnWarnings implementation="boolean" default-value="false">${maven.javadoc.failOnWarnings}</failOnWarnings>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <footer implementation="java.lang.String">${footer}</footer>
        <header implementation="java.lang.String">${header}</header>
        <helpfile implementation="java.lang.String">${helpfile}</helpfile>
        <includeDependencySources implementation="boolean" default-value="false"/>
        <includeTransitiveDependencySources implementation="boolean" default-value="false"/>
        <isOffline implementation="boolean" default-value="${settings.offline}"/>
        <javaApiLinks implementation="java.util.Properties">${javaApiLinks}</javaApiLinks>
        <javadocDirectory implementation="java.io.File" default-value="${basedir}/src/main/javadoc"/>
        <javadocExecutable implementation="java.lang.String">${javadocExecutable}</javadocExecutable>
        <javadocOptionsDir implementation="java.io.File" default-value="${project.build.directory}/javadoc-bundle-options"/>
        <javadocVersion implementation="java.lang.String">${javadocVersion}</javadocVersion>
        <keywords implementation="boolean" default-value="false">${keywords}</keywords>
        <links implementation="java.util.ArrayList">${links}</links>
        <linksource implementation="boolean" default-value="false">${linksource}</linksource>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <locale implementation="java.lang.String">${locale}</locale>
        <maxmemory implementation="java.lang.String">${maxmemory}</maxmemory>
        <minmemory implementation="java.lang.String">${minmemory}</minmemory>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <nocomment implementation="boolean" default-value="false">${nocomment}</nocomment>
        <nodeprecated implementation="boolean" default-value="false">${nodeprecated}</nodeprecated>
        <nodeprecatedlist implementation="boolean" default-value="false">${nodeprecatedlist}</nodeprecatedlist>
        <nohelp implementation="boolean" default-value="false">${nohelp}</nohelp>
        <noindex implementation="boolean" default-value="false">${noindex}</noindex>
        <nonavbar implementation="boolean" default-value="false">${nonavbar}</nonavbar>
        <nooverview implementation="boolean" default-value="false">${nooverview}</nooverview>
        <noqualifier implementation="java.lang.String">${noqualifier}</noqualifier>
        <nosince implementation="boolean" default-value="false">${nosince}</nosince>
        <notimestamp implementation="boolean" default-value="false">${notimestamp}</notimestamp>
        <notree implementation="boolean" default-value="false">${notree}</notree>
        <offlineLinks implementation="org.apache.maven.plugins.javadoc.options.OfflineLink[]">${offlineLinks}</offlineLinks>
        <old implementation="boolean" default-value="false">${old}</old>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/apidocs">${destDir}</outputDirectory>
        <outputTimestamp implementation="java.lang.String" default-value="${project.build.outputTimestamp}"/>
        <overview implementation="java.io.File" default-value="${basedir}/src/main/javadoc/overview.html">${overview}</overview>
        <packagesheader implementation="java.lang.String">${packagesheader}</packagesheader>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean" default-value="false">${quiet}</quiet>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <release implementation="java.lang.String" default-value="${maven.compiler.release}"/>
        <resourcesArtifacts implementation="org.apache.maven.plugins.javadoc.options.ResourcesArtifact[]">${resourcesArtifacts}</resourcesArtifacts>
        <serialwarn implementation="boolean" default-value="false">${serialwarn}</serialwarn>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
        <show implementation="java.lang.String" default-value="protected">${show}</show>
        <skip implementation="boolean" default-value="false">${maven.javadoc.skip}</skip>
        <skippedModules implementation="java.lang.String">${maven.javadoc.skippedModules}</skippedModules>
        <source implementation="java.lang.String" default-value="${maven.compiler.source}">${source}</source>
        <sourceDependencyCacheDir implementation="java.io.File" default-value="${project.build.directory}/distro-javadoc-sources"/>
        <sourcepath implementation="java.lang.String">${sourcepath}</sourcepath>
        <sourcetab implementation="int">${sourcetab}</sourcetab>
        <splitindex implementation="boolean" default-value="false">${splitindex}</splitindex>
        <staleDataPath implementation="java.io.File" default-value="${project.build.directory}/maven-javadoc-plugin-stale-data.txt">${staleDataPath}</staleDataPath>
        <stylesheet implementation="java.lang.String" default-value="java">${stylesheet}</stylesheet>
        <stylesheetfile implementation="java.lang.String">${stylesheetfile}</stylesheetfile>
        <subpackages implementation="java.lang.String">${subpackages}</subpackages>
        <taglet implementation="java.lang.String">${taglet}</taglet>
        <tagletArtifact implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact">${tagletArtifact}</tagletArtifact>
        <tagletArtifacts implementation="org.apache.maven.plugins.javadoc.options.TagletArtifact[]">${tagletArtifacts}</tagletArtifacts>
        <tagletpath implementation="java.lang.String">${tagletpath}</tagletpath>
        <taglets implementation="org.apache.maven.plugins.javadoc.options.Taglet[]">${taglets}</taglets>
        <tags implementation="org.apache.maven.plugins.javadoc.options.Tag[]">${tags}</tags>
        <testJavadocDirectory implementation="java.io.File" default-value="${basedir}/src/test/javadoc"/>
        <top implementation="java.lang.String">${top}</top>
        <use implementation="boolean" default-value="true">${use}</use>
        <useStandardDocletOptions implementation="boolean" default-value="true">${useStandardDocletOptions}</useStandardDocletOptions>
        <validateLinks implementation="boolean" default-value="false">${validateLinks}</validateLinks>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
        <version implementation="boolean" default-value="true">${version}</version>
        <windowtitle implementation="java.lang.String" default-value="${project.name} ${project.version} API">${windowtitle}</windowtitle>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.handler.manager.ArtifactHandlerManager</role>
          <field-name>artifactHandlerManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>mavenProjectBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.javadoc.resolver.ResourceResolver</role>
          <field-name>resourceResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model-builder</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.21</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.plexus</artifactId>
      <type>jar</type>
      <version>0.3.0.M1</version>
    </dependency>
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>jsr250-api</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.inject</artifactId>
      <type>jar</type>
      <version>0.3.0.M1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings-builder</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-aether-provider</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.aether</groupId>
      <artifactId>aether-impl</artifactId>
      <type>jar</type>
      <version>1.0.0.v20140518</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.aether</groupId>
      <artifactId>aether-api</artifactId>
      <type>jar</type>
      <version>1.0.0.v20140518</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.aether</groupId>
      <artifactId>aether-util</artifactId>
      <type>jar</type>
      <version>1.0.0.v20140518</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>3.2.3</version>
    </dependency>
    <dependency>
      <groupId>aopalliance</groupId>
      <artifactId>aopalliance</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <type>jar</type>
      <version>16.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-classworlds</artifactId>
      <type>jar</type>
      <version>2.5.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-sec-dispatcher</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-cipher</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>3.2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.reporting</groupId>
      <artifactId>maven-reporting-api</artifactId>
      <type>jar</type>
      <version>3.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-archiver</artifactId>
      <type>jar</type>
      <version>3.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-io</artifactId>
      <type>jar</type>
      <version>3.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-archiver</artifactId>
      <type>jar</type>
      <version>4.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
      <type>jar</type>
      <version>1.21</version>
    </dependency>
    <dependency>
      <groupId>org.iq80.snappy</groupId>
      <artifactId>snappy</artifactId>
      <type>jar</type>
      <version>0.4</version>
    </dependency>
    <dependency>
      <groupId>org.tukaani</groupId>
      <artifactId>xz</artifactId>
      <type>jar</type>
      <version>1.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-invoker</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
      <type>jar</type>
      <version>3.3.3</version>
    </dependency>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <type>jar</type>
      <version>1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-common-artifact-filters</artifactId>
      <type>jar</type>
      <version>3.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <type>jar</type>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <type>jar</type>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>2.1.7</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-artifact-transfer</artifactId>
      <type>jar</type>
      <version>0.13.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>1.7.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-sink-api</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-logging-api</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-site-renderer</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-core</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-decoration-model</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-skin-model</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-module-xhtml</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-module-xhtml5</artifactId>
      <type>jar</type>
      <version>1.11.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-i18n</artifactId>
      <type>jar</type>
      <version>1.0-beta-10</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-30</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-velocity</artifactId>
      <type>jar</type>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
      <type>jar</type>
      <version>1.7</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity-tools</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <type>jar</type>
      <version>1.7.0</version>
    </dependency>
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <type>jar</type>
      <version>1.8</version>
    </dependency>
    <dependency>
      <groupId>commons-chain</groupId>
      <artifactId>commons-chain</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>dom4j</groupId>
      <artifactId>dom4j</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>oro</groupId>
      <artifactId>oro</artifactId>
      <type>jar</type>
      <version>2.0.8</version>
    </dependency>
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <type>jar</type>
      <version>3.2.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <type>jar</type>
      <version>3.12.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <type>jar</type>
      <version>1.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <type>jar</type>
      <version>4.5.13</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <type>jar</type>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <type>jar</type>
      <version>4.4.15</version>
    </dependency>
    <dependency>
      <groupId>com.thoughtworks.qdox</groupId>
      <artifactId>qdox</artifactId>
      <type>jar</type>
      <version>2.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-java</artifactId>
      <type>jar</type>
      <version>1.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <type>jar</type>
      <version>9.2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.4.2</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <version>2.11.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interactivity-api</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.aether</groupId>
      <artifactId>aether-spi</artifactId>
      <type>jar</type>
      <version>1.0.0.v20140518</version>
    </dependency>
  </dependencies>
</plugin>